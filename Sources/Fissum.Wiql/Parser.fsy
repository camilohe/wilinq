%{


open ParserHelpers

let parse_error_rich = 
   Some handleParsingError


%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token MINUS
%token <System.Int32> INT
%token <System.Double> FLOAT
%token LPAREN RPAREN
%token EOF
%token GREATER LESS GT LT IN EQUAL DIFF UNDER
%token FROM
%token ORDER BY DESC ASC
%token WORKITEMS WORKITEMLINKS
%token NOT SEMI AND OR SELECT WHERE ASOF 
%token MODE DOESNOTCONTAIN RECURSIVE MUSTCONTAIN
%token <System.String> FIELD
%token <System.String> SOURCEFIELD
%token <System.String> TARGETFIELD
%token <System.String> PARAMETER
%token <System.String> STRING

%left MINUS



// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.

%type <WiLinq.LinqProvider.Wiql.Query> start

%%

start: 
| Query  EOF { $1 }

Query: 
| SELECT FieldList FROM WORKITEMS WhereBlock OrderBlock {  generateQuery $2 $5 $6}
| SELECT FieldList FROM WORKITEMLINKS WhereBlock OrderBlock MODE LPAREN ModeType RPAREN { generateQueryForLinks $2 $5 $6 $9}

ModeType:
| DOESNOTCONTAIN	{ WiLinq.LinqProvider.Wiql.QueryMode.DoesNotContain }
| RECURSIVE			{ WiLinq.LinqProvider.Wiql.QueryMode.Recursive }
| MUSTCONTAIN		{ WiLinq.LinqProvider.Wiql.QueryMode.MustContain }


FieldList:
| FIELD { [$1] }
| FieldList SEMI FIELD { $3 :: $1 }

WhereBlock:
| { None }
| WhereList { Some $1 }

OrderBlock:
| { None }
| ORDER BY OrderList { Some $3 }

OrderList:
| OrderStatement				{ [$1] }
| OrderStatement SEMI OrderList { $1::$3 }

OrderStatement:
| FIELD OrderType { new WiLinq.LinqProvider.Wiql.OrderStatement(Field=$1,IsAscending=$2) } 

OrderType:
|			{ true }
| ASC		{ true }
| DESC		{ false }

WhereList:
| WhereStatement			{ [$1] }
| WhereStatement WhereList	{ $1::$2 }

WhereStatement:
| WHERE WhereTestStatement { $2 }


WhereTestStatement:
| TestStatement				{ $1 }
| LPAREN WhereTestStatement RPAREN { $2 }
| WhereTestStatement BoolOp WhereTestStatement { new WiLinq.LinqProvider.Wiql.BooleanOperationStatement($1,$2,$3) :> WiLinq.LinqProvider.Wiql.WhereStatement}

BoolOp:
| AND		{ WiLinq.LinqProvider.Wiql.BooleanOperationStatementType.And }
| OR		{ WiLinq.LinqProvider.Wiql.BooleanOperationStatementType.Or }


TestStatement:
| FieldStatement Operator ValueStatement { generateTestStatement $1 $2 $3}


FieldStatement:
| FIELD			{ ($1,WiLinq.LinqProvider.Wiql.FieldType.Default) }
| SOURCEFIELD	{ ($1,WiLinq.LinqProvider.Wiql.FieldType.Source) }
| TARGETFIELD	{ ($1,WiLinq.LinqProvider.Wiql.FieldType.Target) }


Operator:
| GREATER	{ WiLinq.LinqProvider.Wiql.FieldOperationStatementType.IsGreater }
| LESS		{ WiLinq.LinqProvider.Wiql.FieldOperationStatementType.IsLess }
| GT		{ WiLinq.LinqProvider.Wiql.FieldOperationStatementType.IsGreaterOrEqual }
| LT		{ WiLinq.LinqProvider.Wiql.FieldOperationStatementType.IsLessOrEqual }
| EQUAL		{ WiLinq.LinqProvider.Wiql.FieldOperationStatementType.Equals }
| UNDER		{ WiLinq.LinqProvider.Wiql.FieldOperationStatementType.IsUnder }
| DIFF		{ WiLinq.LinqProvider.Wiql.FieldOperationStatementType.IsDifferent }
| IN		{ WiLinq.LinqProvider.Wiql.FieldOperationStatementType.IsIn }

ValueStatement:
| INT								{ WiLinq.LinqProvider.Wiql.ValueStatement.Create($1) }
| MINUS INT							{ WiLinq.LinqProvider.Wiql.ValueStatement.Create(-$2) }
| PARAMETER MINUS INT				{ processTodayStatement $1 $3}
| PARAMETER							{ WiLinq.LinqProvider.Wiql.ValueStatement.CreateParameter($1) }
| STRING							{ WiLinq.LinqProvider.Wiql.ValueStatement.Create($1) }
| LPAREN ValueStatementList	RPAREN	{ processValueStatementList $2 }

ValueStatementList:
| ValueStatement			{ [$1] }
| ValueStatement SEMI ValueStatementList	{ $1::$3 }


